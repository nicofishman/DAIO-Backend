generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Artista {
    id             String           @id
    name           String
    image          String
    genres         String[]
    external_url   String?
    ArtistXCancion ArtistXCancion[]
    Artist         Artist[]

    @@map("artistas")
}

model Cancion {
    id             String           @id
    name           String
    preview_url    String?
    duration       Int
    genres         String[]
    albumId        String
    albumName      String
    albumImage     String
    artistsId      String[]
    external_url   String?
    ArtistXCancion ArtistXCancion[]
    Track          Track[]

    @@map("canciones")
}

model ArtistXCancion {
    artistId  String
    cancionId String
    artista   Artista @relation(fields: [artistId], references: [id], onDelete: Cascade)
    cancion   Cancion @relation(fields: [cancionId], references: [id], onDelete: Cascade)

    @@id([artistId, cancionId])
    @@map("artistas_canciones")
}

model Artist {
    artistId String
    fkUser   String
    orden    Int
    artista  Artista @relation(fields: [artistId], references: [id])
    user     User    @relation(fields: [fkUser], references: [spotifyId], onDelete: Cascade)

    @@id([artistId, fkUser, orden])
    @@map("artistxuser")
}

model interactions {
    madeById         String
    interactedWithId String
    decision         Boolean
    timestamp        DateTime @db.Timestamp(6)
    id               Int      @default(autoincrement())
    isMatch          Boolean?

    @@id([madeById, interactedWithId, id])
}

model Track {
    trackId String
    fkUser  String
    orden   Int
    user    User    @relation(fields: [fkUser], references: [spotifyId], onDelete: Cascade)
    cancion Cancion @relation(fields: [trackId], references: [id])

    @@id([trackId, fkUser, orden])
    @@map("trackxuser")
}

model User {
    spotifyId   String   @id
    username    String
    description String
    avatarId    Decimal  @db.Decimal
    instagram   String?
    artists     Artist[]
    tracks      Track[]

    @@map("users")
}
